@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

package UI {
    class ConsoleUI {
        - Map<Integer, String> charMap
        - Sudoku sudoku
        - {static}Map<Integer, String> createCharMap()
        + start(): void
        - void demanderCharMap
        - void demanderTaille()
        - void demanderGrille()
        - void initGrille()
        - void afficherGrille()
    }

    class GUI {
        // Extension à réaliser
    }
}

UI --> Game.Sudoku

package Game {
    class Case {
        - Integer valeur
        - int blocId
        - Set<Integer> valeursPossibles

        + Case(int blocId, Integer valeur)
        + Integer getValeur()
        + int getBlocId()
        + void setValeur(Integer valeur)
        + Set<Integer> getValeursPossibles()
        + void setValeursPossibles(Set<Integer> valeursPossibles)
        + String toString()
    }

    class Bloc {
        - int taille
        - ArrayList<Case> cases

        + Bloc(int taille, ArrayList<Case> cases)
        + boolean validerBloc()
        + ArrayList<Case> getCases()
    }

    class Grille {
        - Case[][] grille
        - final int taille
        - ArrayList<Bloc> blocs

        + Grille(int taille)
        + Case[][] getGrille()
        + ArrayList<Bloc> getBlocs()
        + int getTaille()
        + void setCase(int row, int col, int valeur)
        + boolean isValid()
        + boolean isComplete()
    }

    class Sudoku {
        # Grille grille
        # Solveur solveur

        + Sudoku(int taille)
        + boolean solve(List<MethodeResolution> methodes)
        + Case[][] getGrille()
        + int getTaille()
        + void generer(Difficulte difficulte)
        # void supprimerCases(int nb)
        + List<String> getLog()
    }

    enum Difficulte {
        FACILE
        MOYEN
        DIFFICILE
    }

    class Solveur {
        - Grille grille
        - int taille
        - List<String> log
        - List<MethodeResolution> regles

        + Solveur(Grille grille)
        + boolean solve(boolean backtracking, List<MethodeResolution> regles)
        + boolean solveBackTracking()
        - void solveRegles()
        - boolean solveEliminationDirecte()
        - boolean solvePlacementForce()
        - boolean solvePaires()
        - void updateValeursPossibles(int row, int col)
        - void updateAllValeursPossibles()
        + List<String> getLog()
    }

    enum MethodeResolution {
        BACKTRACKING
        ELIMINATION_DIRECTE
        PLACEMENT_FORCE
        PAIRES
    }


    Grille *-- "N" Case
    Grille *-- "N" Bloc
    Bloc .> Case
    Sudoku -> Grille
    Sudoku -> Solveur
    Solveur ..>  Grille
    Solveur --> MethodeResolution
    Difficulte <. Sudoku
}
@enduml
